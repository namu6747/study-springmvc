Packaging는 War가 아니라 Jar를 선택해주세요. 
JSP를 사용하지 않기 때문에 Jar를 사용하는 것이 좋습니다. 
앞으로 스프링 부트를 사용하면 이 방식을 주로 사용하게 됩니다.
> Jar를 사용하면 항상 내장 서버(톰캣등)를 사용하고, 
 webapp 경로도 사용하지 않습니다. 
 내장 서버 사용에 최적화 되어 있는 기능입니다. 
 최근에는 주로 이 방식을 사용합니다.
> War를 사용하면 내장 서버도 사용가능 하지만, 
 주로 외부 서버에 배포하는 목적으로 사용합니다

로그 라이브러리는 Logback, Log4J, Log4J2 등등 
수 많은 라이브러리가 있는데, 그것을 통합해서
인터페이스로 제공하는 것이 바로 SLF4J 라이브러리다.
쉽게 이야기해서 SLF4J는 인터페이스이고, 
그 구현체로 Logback 같은 로그 라이브러리를 선택하면 된다.
실무에서는 스프링 부트가 기본으로 제공하는 Logback을 대부분 사용한다.

톰캣 같은 WAS 서버를 별도로 설치하고 빌드된 War 넣을때 혹은 jsp를 쓸때

로그 레벨 설정을 변경해서 출력 결과를 보자.
LEVEL: TRACE > DEBUG > INFO > WARN > ERROR
개발 서버는 debug 출력
운영 서버는 info 출력

로그 찍을 때 절대 연산을 넣지 않는다.
/hello-basic 으로 매핑하면
/hello-basic, /hello-basic/ 스프링에선 둘다 엮어버린다.
원래는 완전히 다른 url이다.

경로 변수 vs 쿼리 파라미터
/mapping/{userId}
/mapping?userId={userId}
전자는 rest 방식에서 자주 사용

resources/static 이나 webapp 에 그대로 노출 되는 페이지는
비로그인 유저도 자유롭게 접근할 수 있는 공개된 페이지이다.
Spring MVC로 넘어와서 템플릿에 인증 - 인가와 관련된 내용이 들어가는 지
아직은 모르지만 Controller를 거치지 않고 주문 수정과 같은
특수한 목적을 가진 html 페이지를 UI를 통하지 않고
브라우저 주소창의 uri를 통해 직접 접근하여 본다는 건 좀 이상하다.

Jar를 사용하면 webapp 경로를 사용할 수 없다.
정적 리소스도 클래스 경로에 함께 포함해야 한다.

@RequestParam 처럼 생략 가능한 어노테이션을 사용할 때
물론 생략하면 작성자 입장에서 편하지만 최적화와 관련 없으니
명확하게 인식시켜줄 수 있도록 남겨두는 것도 고려해야 한다.

잊지말자. RequestMapping method의 parameters annotation 생략 시
String , int , Integer 같은 단순 타입 = @RequestParam
나머지 = @ModelAttribute (argument resolver 로 지정해둔 타입 외)

HTTP 응답
정적 리소스
예) 웹 브라우저에 정적인 HTML, css, js를 제공할 때는, 정적 리소스를 사용한다.
뷰 템플릿 사용
예) 웹 브라우저에 동적인 HTML을 제공할 때는 뷰 템플릿을 사용한다.
HTTP 메시지 사용
HTTP API를 제공하는 경우에는 HTML이 아니라 데이터를 전달해야 하므로, HTTP 메시지 바디에
JSON 같은 형식으로 데이터를 실어 보낸다.

스프링 부트는 클래스패스의 다음 디렉토리에 있는 정적 리소스를 제공한다.
/static , /public , /resources , /META-INF/resources

viewResolver를 통해 뷰 템플릿을 반환하는 과정에서
void를 반환하는 방식은 명시성이 떨어지고 딱 맞는 경우도 별로 없기에 권장하지 않음

@RequestParam (defaultValue)와 Table의 default 어떤 걸 사용할까
ModelAttribute를 이용하여 객체를 생성할 때 생성자에 넣어지는 게 아니라
 setter를 내부적으로 사용한다.













?classpath









